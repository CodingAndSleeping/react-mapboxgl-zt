"use strict";(self.webpackChunkreact_mapboxgl_zt=self.webpackChunkreact_mapboxgl_zt||[]).push([[923],{84455:function(v,r,e){e.r(r),e.d(r,{default:function(){return w}});var f=e(48305),L=e.n(f),n=e(75271),s=e(87833),h=e(22217),x=e(26205),a={DrawControl:{type:"COMPONENT",id:"DrawControl",title:"DrawControl",propsConfig:{type:"object",required:[],className:"DrawControlProps",properties:{position:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","left","right","top","bottom"],className:"ControlPosition"},ref:{oneOf:[{const:null},{type:"string"},{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"instance",type:"T | null",isRequired:!0}]},className:"bivarianceHack"},{type:"object",properties:{current:{oneOf:[{type:"any",className:"T"},{const:null}],description:"The current value of the ref."}},required:["current"],className:"RefObject<T>"}],className:"LegacyRef<T>",description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).",tags:{see:"{@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}"}},key:{oneOf:[{oneOf:[{type:"string"},{type:"number"},{_unknown:"bigint"}],className:"Key"},{const:null}]}}}},FullscreenControl:{type:"COMPONENT",id:"FullscreenControl",title:"FullscreenControl",propsConfig:{type:"object",required:[],className:"FullscreenControlProps",properties:{position:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","left","right","top","bottom"],className:"ControlPosition"},container:{type:"dom",className:"HTMLElement"}}}},MousePositionControl:{type:"COMPONENT",id:"MousePositionControl",title:"MousePositionControl",propsConfig:{type:"object",required:[],className:"MousePositionControlProps",properties:{position:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","left","right","top","bottom"],className:"ControlPosition"},decimals:{type:"number"}}}},NavigationControl:{type:"COMPONENT",id:"NavigationControl",title:"NavigationControl",propsConfig:{type:"object",required:[],className:"NavigationControlProps",properties:{position:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","left","right","top","bottom"],className:"ControlPosition"},showCompass:{type:"boolean"},showZoom:{type:"boolean"},visualizePitch:{type:"boolean"}}}},ScaleControl:{type:"COMPONENT",id:"ScaleControl",title:"ScaleControl",propsConfig:{type:"object",required:[],className:"ScaleControlProps",properties:{position:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","left","right","top","bottom"],className:"ControlPosition"},maxWidth:{type:"number"},unit:{type:"string",enum:["imperial","metric","nautical"],className:"Unit"},ref:{oneOf:[{const:null},{type:"string"},{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"instance",type:"T | null",isRequired:!0}]},className:"bivarianceHack"},{type:"object",properties:{current:{oneOf:[{type:"any",className:"T"},{const:null}],description:"The current value of the ref."}},required:["current"],className:"RefObject<T>"}],className:"LegacyRef<T>",description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).",tags:{see:"{@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}"}},key:{oneOf:[{oneOf:[{type:"string"},{type:"number"},{_unknown:"bigint"}],className:"Key"},{const:null}]}}}},BackgroundLayer:{type:"COMPONENT",id:"BackgroundLayer",title:"BackgroundLayer",propsConfig:{type:"object",required:["id"],className:"BackgroundLayerProps",properties:{color:{type:"string"},emissiveStrength:{type:"number"},opacity:{type:"number"},imgUrl:{type:"string"},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"}}}},CircleLayer:{type:"COMPONENT",id:"CircleLayer",title:"CircleLayer",propsConfig:{oneOf:[{type:"object",properties:{source:{type:"object",required:["type"],className:"GeoJSONSourceSpecification",properties:{type:{const:"geojson"},data:{type:"any"},maxzoom:{type:"number"},minzoom:{type:"number"},attribution:{type:"string"},buffer:{type:"number"},filter:{type:"any"},tolerance:{type:"number"},cluster:{type:"boolean"},clusterRadius:{type:"number"},clusterMaxZoom:{type:"number"},clusterMinPoints:{type:"number"},clusterProperties:{type:"any"},lineMetrics:{type:"boolean"},generateId:{type:"boolean"},promoteId:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"},{type:"object",properties:{},required:[],additionalProperties:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},className:"__type"}],className:"PromoteIdSpecification"},dynamic:{type:"boolean"}}},sourceLayer:{type:"string"}},required:["source"],className:"GeojsonSource"},{type:"object",properties:{source:{type:"object",required:["type"],className:"VectorSourceSpecification",additionalProperties:{type:"any"},properties:{type:{const:"vector"},url:{type:"string"},tiles:{type:"array",className:"Array",items:{type:"string"}},bounds:{type:"array",minItems:4,maxItems:4,items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}]},scheme:{type:"string",enum:["xyz","tms"]},minzoom:{type:"number"},maxzoom:{type:"number"},attribution:{type:"string"},promoteId:{$ref:"#/definition/PromoteIdSpecification"},volatile:{type:"boolean"}}},sourceLayer:{type:"string"}},required:["source","sourceLayer"],className:"VectorSource"}],type:"object",required:["id"],className:"CircleLayerBaseProps",properties:{blur:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},color:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},emissiveStrength:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},opacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},pitchAlignment:{type:"string",enum:["map","viewport"]},pitchScale:{type:"string",enum:["map","viewport"]},radius:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},sortKey:{type:"number"},strokeColor:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},strokeOpacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},strokeWidth:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},translate:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},translateAnchor:{type:"string",enum:["map","viewport"]},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"},onMouseDown:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseUp:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseOver:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseMove:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseEnter:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseLeave:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onMouseOut:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onClick:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapMouseEvent",isRequired:!0}]},className:"__type"},onTouchStart:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapTouchEvent",isRequired:!0}]},className:"__type"},onTouchEnd:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapTouchEvent",isRequired:!0}]},className:"__type"},onTouchCancel:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:"mapboxgl.MapTouchEvent",isRequired:!0}]},className:"__type"}}}},FillLayer:{type:"COMPONENT",id:"FillLayer",title:"FillLayer",propsConfig:{oneOf:[{$ref:"#/definition/GeojsonSource"},{type:"object",properties:{source:{type:"object",required:["type"],className:"VectorSourceSpecification",additionalProperties:{type:"any"},properties:{type:{const:"vector"},url:{type:"string"},tiles:{type:"array",className:"Array",items:{type:"string"}},bounds:{type:"array",minItems:4,maxItems:4,items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}]},scheme:{type:"string",enum:["xyz","tms"]},minzoom:{type:"number"},maxzoom:{type:"number"},attribution:{type:"string"},promoteId:{$ref:"#/definition/PromoteIdSpecification"},volatile:{type:"boolean"}}},sourceLayer:{type:"string"}},required:["source","sourceLayer"],className:"VectorSource"}],type:"object",required:["id"],className:"FillLayerBaseProps",$ref:"#/definition/LayerEvents",properties:{antialias:{type:"boolean"},color:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},emissiveStrength:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},opacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},outlineColor:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},imgUrl:{type:"string"},sortKey:{type:"number"},translate:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},translateAnchor:{type:"string",enum:["map","viewport"]},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"}}}},HeatmapLayer:{type:"COMPONENT",id:"HeatmapLayer",title:"HeatmapLayer",propsConfig:{oneOf:[{$ref:"#/definition/GeojsonSource"},{type:"object",properties:{source:{type:"object",required:["type"],className:"VectorSourceSpecification",additionalProperties:{type:"any"},properties:{type:{const:"vector"},url:{type:"string"},tiles:{type:"array",className:"Array",items:{type:"string"}},bounds:{type:"array",minItems:4,maxItems:4,items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}]},scheme:{type:"string",enum:["xyz","tms"]},minzoom:{type:"number"},maxzoom:{type:"number"},attribution:{type:"string"},promoteId:{$ref:"#/definition/PromoteIdSpecification"},volatile:{type:"boolean"}}},sourceLayer:{type:"string"}},required:["source","sourceLayer"],className:"VectorSource"}],className:"HeatmapLayerProps",type:"object",required:["id"],properties:{color:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},intensity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},opacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},radius:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},weight:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"}}}},LineLayer:{type:"COMPONENT",id:"LineLayer",title:"LineLayer",propsConfig:{oneOf:[{$ref:"#/definition/GeojsonSource"},{type:"object",properties:{source:{type:"object",required:["type"],className:"VectorSourceSpecification",additionalProperties:{type:"any"},properties:{type:{const:"vector"},url:{type:"string"},tiles:{type:"array",className:"Array",items:{type:"string"}},bounds:{type:"array",minItems:4,maxItems:4,items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}]},scheme:{type:"string",enum:["xyz","tms"]},minzoom:{type:"number"},maxzoom:{type:"number"},attribution:{type:"string"},promoteId:{$ref:"#/definition/PromoteIdSpecification"},volatile:{type:"boolean"}}},sourceLayer:{type:"string"}},required:["source","sourceLayer"],className:"VectorSource"}],type:"object",required:["id"],className:"LineLayerBaseProps",$ref:"#/definition/LayerEvents",properties:{blur:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},cap:{type:"string",enum:["butt","round","square"]},color:{oneOf:[{type:"string"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},dasharray:{type:"array",className:"Array",items:{type:"number"}},emissiveStrength:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},gapWidth:{type:"number"},gradient:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},join:{type:"string",enum:["none","round","bevel","miter"]},miterLimit:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},occlusionOpacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},offset:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},opacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},roundLimit:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},sortKey:{type:"number"},translate:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},translateAnchor:{type:"string",enum:["map","viewport"]},trimOffset:{type:"array",minItems:2,maxItems:2,items:[{type:"number"},{type:"number"}]},width:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},imgUrl:{type:"string"},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"}}}},RasterLayer:{type:"COMPONENT",id:"RasterLayer",title:"RasterLayer",propsConfig:{type:"object",required:["source","id"],className:"RasterLayerProps",properties:{source:{type:"object",required:["type"],className:"RasterSourceSpecification",additionalProperties:{type:"any"},properties:{type:{const:"raster"},url:{type:"string"},tiles:{type:"array",className:"Array",items:{type:"string"}},bounds:{type:"array",minItems:4,maxItems:4,items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}]},minzoom:{type:"number"},maxzoom:{type:"number"},tileSize:{type:"number"},scheme:{type:"string",enum:["xyz","tms"]},attribution:{type:"string"},volatile:{type:"boolean"}}},brightnessMax:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},brightnessMin:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},color:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},colorMix:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"},{type:"number"},{type:"number"}],minItems:4,maxItems:4},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},colorRange:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},contrast:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},emissiveStrength:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},fadeDuration:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},hueRotate:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},opacity:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},resampling:{type:"string",enum:["linear","nearest"]},saturation:{oneOf:[{type:"number"},{type:"array",items:[{type:"string"},{type:"any"}],minItems:2,maxItems:2,className:"ExpressionSpecification"}]},id:{type:"string"},filter:{type:"array",minItems:2,maxItems:2,className:"ExpressionSpecification",items:[{type:"string"},{type:"any"}]},maxzoom:{type:"number"},minzoom:{type:"number"},visibility:{type:"string",enum:["visible","none"]},beforeId:{type:"string"},slot:{type:"string"}}}},Marker:{type:"COMPONENT",id:"Marker",title:"Marker",propsConfig:{type:"object",required:[],className:"MarkerProps",properties:{lngLat:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"object",properties:{lng:{type:"number"},lat:{type:"number"},wrap:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).",tags:{returns:"{LngLat} The wrapped `LngLat` object.\n	 *",example:`* const ll = new mapboxgl.LngLat(286.0251, 40.7736);
	 * const wrapped = ll.wrap();
	 * console.log(wrapped.lng); // = -73.9749`},className:"wrap"},toArray:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},arguments:[]},description:"Returns the coordinates represented as an array of two numbers.",tags:{returns:`{Array<number>} The coordinates represeted as an array of longitude and latitude.
	 *`,example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toArray(); // = [-73.9749, 40.7736]`},className:"toArray"},toString:{type:"function",signature:{isAsync:!1,returnType:{type:"string"},arguments:[]},description:"Returns the coordinates represent as a string.",tags:{returns:"{string} The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n	 *",example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toString(); // = "LngLat(-73.9749, 40.7736)"`},className:"toString"},distanceTo:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[{key:"lngLat",type:"mapboxgl.LngLat",isRequired:!0}]},description:`Returns the approximate distance between a pair of coordinates in meters.
Uses the Haversine Formula (from R.W. Sinnott, "Virtues of the Haversine", Sky and Telescope, vol. 68, no. 2, 1984, p. 159).`,tags:{param:`{LngLat} lngLat Coordinates to compute the distance to.
	 *`,returns:`{number} Distance in meters between the two coordinates.
	 *`,example:`* const newYork = new mapboxgl.LngLat(-74.0060, 40.7128);
	 * const losAngeles = new mapboxgl.LngLat(-118.2437, 34.0522);
	 * newYork.distanceTo(losAngeles); // = 3935751.690893987, "true distance" using a non-spherical approximation is ~3966km`},className:"distanceTo"},toBounds:{type:"function",signature:{isAsync:!1,returnType:{type:"object",properties:{_ne:{$ref:"#/definition/LngLat"},_sw:{$ref:"#/definition/LngLat"},setNorthEast:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"ne",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Set the northeast corner of the bounding box.",tags:{param:`{LngLatLike} ne A {@link LngLatLike} object describing the northeast corner of the bounding box.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.setNorthEast([-73.9397, 42.8002]);`},className:"setNorthEast"},setSouthWest:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"sw",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Set the southwest corner of the bounding box.",tags:{param:`{LngLatLike} sw A {@link LngLatLike} object describing the southwest corner of the bounding box.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.setSouthWest([-73.9876, 40.2661]);`},className:"setSouthWest"},extend:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"obj",type:"mapboxgl.LngLatLike | mapboxgl.LngLatBoundsLike",isRequired:!0}]},description:"Extend the bounds to include a given LngLatLike or LngLatBoundsLike.",tags:{param:`{LngLatLike|LngLatBoundsLike} obj Object to extend to.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.extend([-72.9876, 42.2661]);`},className:"extend"},getCenter:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the geographical coordinate equidistant from the bounding box's corners.",tags:{returns:`{LngLat} The bounding box's center.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}`},className:"getCenter"},getSouthWest:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the southwest corner of the bounding box.",tags:{returns:`{LngLat} The southwest corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouthWest(); // LngLat {lng: -73.9876, lat: 40.7661}`},className:"getSouthWest"},getNorthEast:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the northeast corner of the bounding box.",tags:{returns:`{LngLat} The northeast corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorthEast(); // LngLat {lng: -73.9397, lat: 40.8002}`},className:"getNorthEast"},getNorthWest:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the northwest corner of the bounding box.",tags:{returns:`{LngLat} The northwest corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorthWest(); // LngLat {lng: -73.9876, lat: 40.8002}`},className:"getNorthWest"},getSouthEast:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the southeast corner of the bounding box.",tags:{returns:`{LngLat} The southeast corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouthEast(); // LngLat {lng: -73.9397, lat: 40.7661}`},className:"getSouthEast"},getWest:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the west edge of the bounding box.",tags:{returns:`{number} The west edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getWest(); // -73.9876`},className:"getWest"},getSouth:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the south edge of the bounding box.",tags:{returns:`{number} The south edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouth(); // 40.7661`},className:"getSouth"},getEast:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the east edge of the bounding box.",tags:{returns:`{number} The east edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getEast(); // -73.9397`},className:"getEast"},getNorth:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the north edge of the bounding box.",tags:{returns:`{number} The north edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorth(); // 40.8002`},className:"getNorth"},toArray:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2},arguments:[]},description:"Returns the bounding box represented as an array.",tags:{returns:`{Array<Array<number>>} The bounding box represented as an array, consisting of the
	 * southwest and northeast coordinates of the bounding represented as arrays of numbers.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]`},className:"toArray"},toString:{type:"function",signature:{isAsync:!1,returnType:{type:"string"},arguments:[]},description:"Return the bounding box represented as a string.",tags:{returns:"{string} The bounding box represents as a string of the format\n	 * `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n	 *",example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toString(); // = "LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))"`},className:"toString"},isEmpty:{type:"function",signature:{isAsync:!1,returnType:{type:"boolean"},arguments:[]},description:"Check if the bounding box is an empty/`null`-type box.",tags:{returns:`{boolean} True if bounds have been defined, otherwise false.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds();
	 * llb.isEmpty(); // true
	 * llb.setNorthEast([-73.9876, 40.7661]);
	 * llb.setSouthWest([-73.9397, 40.8002]);
	 * llb.isEmpty(); // false`},className:"isEmpty"},contains:{type:"function",signature:{isAsync:!1,returnType:{type:"boolean"},arguments:[{key:"lnglat",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Check if the point is within the bounding box.",tags:{param:`{LngLatLike} lnglat Geographic point to check against.
	*`,returns:`{boolean} True if the point is within the bounding box.
	*`,example:`* const llb = new mapboxgl.LngLatBounds(
	*   new mapboxgl.LngLat(-73.9876, 40.7661),
	*   new mapboxgl.LngLat(-73.9397, 40.8002)
	* );
	*
	* const ll = new mapboxgl.LngLat(-73.9567, 40.7789);
	*
	* console.log(llb.contains(ll)); // = true`},className:"contains"}},required:["_ne","_sw","setNorthEast","setSouthWest","extend","getCenter","getSouthWest","getNorthEast","getNorthWest","getSouthEast","getWest","getSouth","getEast","getNorth","toArray","toString","isEmpty","contains"],className:"LngLatBounds"},arguments:[{key:"radius",type:"number | undefined",hasQuestionToken:!0}]},description:"Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.",tags:{param:`{number} [radius=0] Distance in meters from the coordinates to extend the bounds.
	 *`,returns:"{LngLatBounds} A new `LngLatBounds` object representing the coordinates extended by the `radius`.\n	 *",example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]`},className:"toBounds"},toEcef:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},arguments:[{key:"altitude",type:"number",isRequired:!0}]},className:"toEcef"}},required:["lng","lat","wrap","toArray","toString","distanceTo","toBounds","toEcef"],className:"LngLat"},{type:"object",properties:{lng:{type:"number"},lat:{type:"number"}},required:["lng","lat"],className:"__type"},{type:"object",properties:{lon:{type:"number"},lat:{type:"number"}},required:["lon","lat"],className:"__type"}],className:"LngLatLike"},anchor:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","center","left","right","top","bottom"],className:"Anchor"},className:{type:"string"},clickTolerance:{type:"number"},color:{type:"string"},draggable:{type:"boolean"},occludedOpacity:{type:"number"},offset:{type:"any"},pitchAlignment:{type:"string"},rotation:{type:"number"},rotationAlignment:{type:"string"},scale:{type:"number"},onDragStart:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:'import("/src/components/overlay/types/index").OverlayEventParams<mapboxgl.Marker>',isRequired:!0}]},className:"__type"},onDrag:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:'import("/src/components/overlay/types/index").OverlayEventParams<mapboxgl.Marker>',isRequired:!0}]},className:"__type"},onDragEnd:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:'import("/src/components/overlay/types/index").OverlayEventParams<mapboxgl.Marker>',isRequired:!0}]},className:"__type"},children:{type:"reactNode",className:"ReactNode"},ref:{oneOf:[{const:null},{type:"string"},{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"instance",type:"T | null",isRequired:!0}]},className:"bivarianceHack"},{type:"object",properties:{current:{oneOf:[{type:"any",className:"T"},{const:null}],description:"The current value of the ref."}},required:["current"],className:"RefObject<T>"}],className:"LegacyRef<T>",description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).",tags:{see:"{@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}"}},key:{oneOf:[{oneOf:[{type:"string"},{type:"number"},{_unknown:"bigint"}],className:"Key"},{const:null}]}}}},Popup:{type:"COMPONENT",id:"Popup",title:"Popup",propsConfig:{type:"object",required:[],className:"PopupProps",properties:{lngLat:{oneOf:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"object",properties:{lng:{type:"number"},lat:{type:"number"},wrap:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns a new `LngLat` object whose longitude is wrapped to the range (-180, 180).",tags:{returns:"{LngLat} The wrapped `LngLat` object.\n	 *",example:`* const ll = new mapboxgl.LngLat(286.0251, 40.7736);
	 * const wrapped = ll.wrap();
	 * console.log(wrapped.lng); // = -73.9749`},className:"wrap"},toArray:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},arguments:[]},description:"Returns the coordinates represented as an array of two numbers.",tags:{returns:`{Array<number>} The coordinates represeted as an array of longitude and latitude.
	 *`,example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toArray(); // = [-73.9749, 40.7736]`},className:"toArray"},toString:{type:"function",signature:{isAsync:!1,returnType:{type:"string"},arguments:[]},description:"Returns the coordinates represent as a string.",tags:{returns:"{string} The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n	 *",example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toString(); // = "LngLat(-73.9749, 40.7736)"`},className:"toString"},distanceTo:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[{key:"lngLat",type:"mapboxgl.LngLat",isRequired:!0}]},description:`Returns the approximate distance between a pair of coordinates in meters.
Uses the Haversine Formula (from R.W. Sinnott, "Virtues of the Haversine", Sky and Telescope, vol. 68, no. 2, 1984, p. 159).`,tags:{param:`{LngLat} lngLat Coordinates to compute the distance to.
	 *`,returns:`{number} Distance in meters between the two coordinates.
	 *`,example:`* const newYork = new mapboxgl.LngLat(-74.0060, 40.7128);
	 * const losAngeles = new mapboxgl.LngLat(-118.2437, 34.0522);
	 * newYork.distanceTo(losAngeles); // = 3935751.690893987, "true distance" using a non-spherical approximation is ~3966km`},className:"distanceTo"},toBounds:{type:"function",signature:{isAsync:!1,returnType:{type:"object",properties:{_ne:{$ref:"#/definition/LngLat"},_sw:{$ref:"#/definition/LngLat"},setNorthEast:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"ne",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Set the northeast corner of the bounding box.",tags:{param:`{LngLatLike} ne A {@link LngLatLike} object describing the northeast corner of the bounding box.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.setNorthEast([-73.9397, 42.8002]);`},className:"setNorthEast"},setSouthWest:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"sw",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Set the southwest corner of the bounding box.",tags:{param:`{LngLatLike} sw A {@link LngLatLike} object describing the southwest corner of the bounding box.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.setSouthWest([-73.9876, 40.2661]);`},className:"setSouthWest"},extend:{type:"function",signature:{isAsync:!1,returnType:{type:"any",className:"LngLatBounds"},arguments:[{key:"obj",type:"mapboxgl.LngLatLike | mapboxgl.LngLatBoundsLike",isRequired:!0}]},description:"Extend the bounds to include a given LngLatLike or LngLatBoundsLike.",tags:{param:`{LngLatLike|LngLatBoundsLike} obj Object to extend to.
	 *`,returns:`{LngLatBounds} Returns itself to allow for method chaining.
	 *`,example:`* const sw = new mapboxgl.LngLat(-73.9876, 40.7661);
	 * const ne = new mapboxgl.LngLat(-73.9397, 40.8002);
	 * const llb = new mapboxgl.LngLatBounds(sw, ne);
	 * llb.extend([-72.9876, 42.2661]);`},className:"extend"},getCenter:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the geographical coordinate equidistant from the bounding box's corners.",tags:{returns:`{LngLat} The bounding box's center.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getCenter(); // = LngLat {lng: -73.96365, lat: 40.78315}`},className:"getCenter"},getSouthWest:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the southwest corner of the bounding box.",tags:{returns:`{LngLat} The southwest corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouthWest(); // LngLat {lng: -73.9876, lat: 40.7661}`},className:"getSouthWest"},getNorthEast:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the northeast corner of the bounding box.",tags:{returns:`{LngLat} The northeast corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorthEast(); // LngLat {lng: -73.9397, lat: 40.8002}`},className:"getNorthEast"},getNorthWest:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the northwest corner of the bounding box.",tags:{returns:`{LngLat} The northwest corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorthWest(); // LngLat {lng: -73.9876, lat: 40.8002}`},className:"getNorthWest"},getSouthEast:{type:"function",signature:{isAsync:!1,returnType:{$ref:"#/definition/LngLat"},arguments:[]},description:"Returns the southeast corner of the bounding box.",tags:{returns:`{LngLat} The southeast corner of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouthEast(); // LngLat {lng: -73.9397, lat: 40.7661}`},className:"getSouthEast"},getWest:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the west edge of the bounding box.",tags:{returns:`{number} The west edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getWest(); // -73.9876`},className:"getWest"},getSouth:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the south edge of the bounding box.",tags:{returns:`{number} The south edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getSouth(); // 40.7661`},className:"getSouth"},getEast:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the east edge of the bounding box.",tags:{returns:`{number} The east edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getEast(); // -73.9397`},className:"getEast"},getNorth:{type:"function",signature:{isAsync:!1,returnType:{type:"number"},arguments:[]},description:"Returns the north edge of the bounding box.",tags:{returns:`{number} The north edge of the bounding box.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.getNorth(); // 40.8002`},className:"getNorth"},toArray:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2},{type:"array",items:[{type:"number"},{type:"number"}],minItems:2,maxItems:2}],minItems:2,maxItems:2},arguments:[]},description:"Returns the bounding box represented as an array.",tags:{returns:`{Array<Array<number>>} The bounding box represented as an array, consisting of the
	 * southwest and northeast coordinates of the bounding represented as arrays of numbers.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]`},className:"toArray"},toString:{type:"function",signature:{isAsync:!1,returnType:{type:"string"},arguments:[]},description:"Return the bounding box represented as a string.",tags:{returns:"{string} The bounding box represents as a string of the format\n	 * `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n	 *",example:`* const llb = new mapboxgl.LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);
	 * llb.toString(); // = "LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))"`},className:"toString"},isEmpty:{type:"function",signature:{isAsync:!1,returnType:{type:"boolean"},arguments:[]},description:"Check if the bounding box is an empty/`null`-type box.",tags:{returns:`{boolean} True if bounds have been defined, otherwise false.
	 *`,example:`* const llb = new mapboxgl.LngLatBounds();
	 * llb.isEmpty(); // true
	 * llb.setNorthEast([-73.9876, 40.7661]);
	 * llb.setSouthWest([-73.9397, 40.8002]);
	 * llb.isEmpty(); // false`},className:"isEmpty"},contains:{type:"function",signature:{isAsync:!1,returnType:{type:"boolean"},arguments:[{key:"lnglat",type:"mapboxgl.LngLatLike",isRequired:!0}]},description:"Check if the point is within the bounding box.",tags:{param:`{LngLatLike} lnglat Geographic point to check against.
	*`,returns:`{boolean} True if the point is within the bounding box.
	*`,example:`* const llb = new mapboxgl.LngLatBounds(
	*   new mapboxgl.LngLat(-73.9876, 40.7661),
	*   new mapboxgl.LngLat(-73.9397, 40.8002)
	* );
	*
	* const ll = new mapboxgl.LngLat(-73.9567, 40.7789);
	*
	* console.log(llb.contains(ll)); // = true`},className:"contains"}},required:["_ne","_sw","setNorthEast","setSouthWest","extend","getCenter","getSouthWest","getNorthEast","getNorthWest","getSouthEast","getWest","getSouth","getEast","getNorth","toArray","toString","isEmpty","contains"],className:"LngLatBounds"},arguments:[{key:"radius",type:"number | undefined",hasQuestionToken:!0}]},description:"Returns a `LngLatBounds` from the coordinates extended by a given `radius`. The returned `LngLatBounds` completely contains the `radius`.",tags:{param:`{number} [radius=0] Distance in meters from the coordinates to extend the bounds.
	 *`,returns:"{LngLatBounds} A new `LngLatBounds` object representing the coordinates extended by the `radius`.\n	 *",example:`* const ll = new mapboxgl.LngLat(-73.9749, 40.7736);
	 * ll.toBounds(100).toArray(); // = [[-73.97501862141328, 40.77351016847229], [-73.97478137858673, 40.77368983152771]]`},className:"toBounds"},toEcef:{type:"function",signature:{isAsync:!1,returnType:{type:"array",items:[{type:"number"},{type:"number"},{type:"number"}],minItems:3,maxItems:3},arguments:[{key:"altitude",type:"number",isRequired:!0}]},className:"toEcef"}},required:["lng","lat","wrap","toArray","toString","distanceTo","toBounds","toEcef"],className:"LngLat"},{type:"object",properties:{lng:{type:"number"},lat:{type:"number"}},required:["lng","lat"],className:"__type"},{type:"object",properties:{lon:{type:"number"},lat:{type:"number"}},required:["lon","lat"],className:"__type"}],className:"LngLatLike"},anchor:{type:"string",enum:["top-left","top-right","bottom-left","bottom-right","center","left","right","top","bottom"],className:"Anchor"},className:{type:"string"},closeButton:{type:"boolean"},closeOnClick:{type:"boolean"},closeOnMove:{type:"boolean"},focusAfterOpen:{type:"boolean"},maxWidth:{type:"string"},offset:{type:"any"},onOpen:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:'import("/src/components/overlay/types/index").OverlayEventParams<mapboxgl.Popup>',isRequired:!0}]},className:"__type"},onClose:{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"e",type:'import("/src/components/overlay/types/index").OverlayEventParams<mapboxgl.Popup>',isRequired:!0}]},className:"__type"},children:{type:"reactNode",className:"ReactNode"},ref:{oneOf:[{const:null},{type:"string"},{type:"function",signature:{isAsync:!1,returnType:{type:"void"},arguments:[{key:"instance",type:"T | null",isRequired:!0}]},className:"bivarianceHack"},{type:"object",properties:{current:{oneOf:[{type:"any",className:"T"},{const:null}],description:"The current value of the ref."}},required:["current"],className:"RefObject<T>"}],className:"LegacyRef<T>",description:"Allows getting a ref to the component instance.\nOnce the component unmounts, React will set `ref.current` to `null`\n(or call the ref with `null` if you passed a callback ref).",tags:{see:"{@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}"}},key:{oneOf:[{oneOf:[{type:"string"},{type:"number"},{_unknown:"bigint"}],className:"Key"},{const:null}]}}}}},o=e(94726),N=e(52676),i={},p={name:"react-mapboxgl-zt",description:"\u4E00\u4E2A\u57FA\u4E8Emapbox\u548Creact\u7684\u5730\u56FE\u7EC4\u4EF6\u5E93",version:"0.1.0",license:"MIT",authors:["ztLee<<11623002372qq.com>>"]},m="browser",y=void 0,u={footer:'Copyright \xA9 2025 | Powered by <a href="https://d.umijs.org" target="_blank" rel="noreferrer">dumi</a>',prefersColor:{default:"light",switch:!0},nprogress:!0,lastUpdated:!0,name:"react-mapboxgl-zt",socialLinks:{github:"https://github.com/CodingAndSleeping/react-mapboxgl-zt"},logo:"/react-mapboxgl-zt/logo.png"},l=!0;function w(){var I=(0,s.pC)(),T=(0,n.useState)(!1),c=L()(T,2),g=c[0],b=c[1],d=(0,n.useRef)(s.m8.location.pathname);(0,n.useEffect)(function(){return s.m8.listen(function(t){t.location.pathname!==d.current&&(d.current=t.location.pathname,document.documentElement.scrollTo(0,0))})},[]);var S=n.useMemo(function(){var t={pkg:p,historyType:m,entryExports:i,demos:null,components:a,locales:o.k,loading:g,setLoading:b,hostname:y,themeConfig:u,_2_level_nav_available:l};return Object.defineProperty(t,"demos",{get:function(){return(0,h.Kp)(!1,"`demos` return empty in latest version, please use `useDemo` instead."),{}}}),t},[p,m,i,a,o.k,g,b,y,u,l]);return(0,N.jsx)(x.D.Provider,{value:S,children:I})}}}]);
